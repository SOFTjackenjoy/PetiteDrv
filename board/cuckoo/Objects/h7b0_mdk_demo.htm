<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\h7b0_mdk_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\h7b0_mdk_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Apr 26 10:10:53 2022
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3d]">ADC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b2]">BDMA1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[9c]">BDMA2_Channel0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[9d]">BDMA2_Channel1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[9e]">BDMA2_Channel2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[9f]">BDMA2_Channel3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a0]">BDMA2_Channel4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a1]">BDMA2_Channel5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a2]">BDMA2_Channel6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a3]">BDMA2_Channel7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[25]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[87]">CEC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a4]">COMP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[aa]">CRS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[78]">CRYP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[9a]">DAC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b6]">DCMI_DMAError</a> from stm32h7xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32h7xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
 <LI><a href="#[b6]">DCMI_DMAError</a> from stm32h7xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32h7xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[b7]">DCMI_DMAXferCplt</a> from stm32h7xx_hal_dcmi.o(i.DCMI_DMAXferCplt) referenced from stm32h7xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[77]">DCMI_PSSI_IRQHandler</a> from stm32h7xx_it.o(i.DCMI_PSSI_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8c]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8d]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8e]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8f]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[69]">DFSDM1_FLT4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6a]">DFSDM1_FLT5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6b]">DFSDM1_FLT6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6c]">DFSDM1_FLT7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[55]">DFSDM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream0_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream6_IRQHandler</a> from stm32h7xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5a]">DMA1_Stream7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[83]">DMA2D_IRQHandler</a> from stm32h7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream6_IRQHandler</a> from stm32h7xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8b]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[9b]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[ac]">DTS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[28]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[ab]">ECC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[31]">EXTI0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[53]">EXTI15_10_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[32]">EXTI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[33]">EXTI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[34]">EXTI3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[35]">EXTI4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[42]">EXTI9_5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3e]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[40]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3f]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[41]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[68]">FDCAN_CAL_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2f]">FLASH_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5b]">FMC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7a]">FPU_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b1]">GFXMMU_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[79]">HASH_RNG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[99]">HSEM1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[23]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4b]">I2C1_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4a]">I2C1_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4d]">I2C2_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4c]">I2C2_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[72]">I2C3_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[71]">I2C3_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[89]">I2C4_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[88]">I2C4_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[96]">JPEG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[86]">LPTIM1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a5]">LPTIM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a6]">LPTIM3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a9]">LPUART1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[82]">LTDC_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[81]">LTDC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[95]">MDIOS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[94]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[97]">MDMA_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[24]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[22]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[85]">OCTOSPI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[ae]">OCTOSPI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[af]">OTFDEC1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b0]">OTFDEC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[75]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2c]">PVD_PVM_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[29]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[30]">RCC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[54]">RTC_Alarm_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2d]">RTC_TAMP_STAMP_CSS_LSE_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2e]">RTC_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[21]">Reset_Handler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[80]">SAI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[84]">SAI2_IRQHandler</a> from stm32h7xx_it.o(i.SAI2_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b8]">SAI_DMAAbort</a> from stm32h7xx_hal_sai.o(i.SAI_DMAAbort) referenced from stm32h7xx_hal_sai.o(i.HAL_SAI_IRQHandler)
 <LI><a href="#[5c]">SDMMC1_IRQHandler</a> from stm32h7xx_it.o(i.SDMMC1_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[98]">SDMMC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[c7]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[cb]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c9]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c8]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[ca]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[8a]">SPDIF_RX_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4e]">SPI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4f]">SPI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5e]">SPI3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7d]">SPI4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7e]">SPI5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7f]">SPI6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[27]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[90]">SWPMI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2a]">SysTick_Handler</a> from stm32h7xx_it.o(i.SysTick_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b4]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h7b0xx.o(.text)
 <LI><a href="#[91]">TIM15_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[92]">TIM16_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[93]">TIM17_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[43]">TIM1_BRK_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[46]">TIM1_CC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[45]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[44]">TIM1_UP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[47]">TIM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[48]">TIM3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[49]">TIM4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5d]">TIM5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[61]">TIM6_DAC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[62]">TIM7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[56]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[59]">TIM8_CC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[58]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[57]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5f]">UART4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[60]">UART5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7b]">UART7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7c]">UART8_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a7]">UART9_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a8]">USART10_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[50]">USART1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[51]">USART2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[52]">USART3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[70]">USART6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[26]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[ad]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2b]">WWDG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b5]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h7b0xx.o(.text)
 <LI><a href="#[b9]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[b9]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[20]">cap_touch_task_idle</a> from touch.o(i.cap_touch_task_idle) referenced 2 times from touch.o(.data)
 <LI><a href="#[ba]">cuckoo_7b0_test</a> from cuckoo_test.o(i.cuckoo_7b0_test) referenced from cuckoo_test.o(i.cuckoo_7b0_test_init)
 <LI><a href="#[18]">drv_IL3820_color_fill</a> from drv_il3820.o(i.drv_IL3820_color_fill) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1c]">drv_IL3820_display_onoff</a> from drv_il3820.o(i.drv_IL3820_display_onoff) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[17]">drv_IL3820_drawpoint</a> from drv_il3820.o(i.drv_IL3820_drawpoint) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[19]">drv_IL3820_fill</a> from drv_il3820.o(i.drv_IL3820_fill) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1b]">drv_IL3820_flush</a> from drv_il3820.o(i.drv_IL3820_flush) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[16]">drv_IL3820_init</a> from drv_il3820.o(i.drv_IL3820_init) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1e]">drv_IL3820_lcd_bl</a> from drv_il3820.o(i.drv_IL3820_lcd_bl) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1a]">drv_IL3820_prepare_display</a> from drv_il3820.o(i.drv_IL3820_prepare_display) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1d]">drv_IL3820_scan_dir</a> from drv_il3820.o(i.drv_IL3820_scan_dir) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[1f]">drv_IL3820_update</a> from drv_il3820.o(i.drv_IL3820_update) referenced 2 times from drv_il3820.o(.data)
 <LI><a href="#[2]">drv_ST7565_color_fill</a> from drv_str7565.o(i.drv_ST7565_color_fill) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[6]">drv_ST7565_display_onoff</a> from drv_str7565.o(i.drv_ST7565_display_onoff) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[1]">drv_ST7565_drawpoint</a> from drv_str7565.o(i.drv_ST7565_drawpoint) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[3]">drv_ST7565_fill</a> from drv_str7565.o(i.drv_ST7565_fill) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[5]">drv_ST7565_flush</a> from drv_str7565.o(i.drv_ST7565_flush) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[0]">drv_ST7565_init</a> from drv_str7565.o(i.drv_ST7565_init) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[8]">drv_ST7565_lcd_bl</a> from drv_str7565.o(i.drv_ST7565_lcd_bl) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[4]">drv_ST7565_prepare_display</a> from drv_str7565.o(i.drv_ST7565_prepare_display) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[7]">drv_ST7565_scan_dir</a> from drv_str7565.o(i.drv_ST7565_scan_dir) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[9]">drv_ST7565_update</a> from drv_str7565.o(i.drv_ST7565_update) referenced 4 times from drv_str7565.o(.data)
 <LI><a href="#[e]">drv_null_color_fill</a> from drv_lcd.o(i.drv_null_color_fill) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[12]">drv_null_display_onoff</a> from drv_lcd.o(i.drv_null_display_onoff) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[d]">drv_null_drawpoint</a> from drv_lcd.o(i.drv_null_drawpoint) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[f]">drv_null_fill</a> from drv_lcd.o(i.drv_null_fill) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[11]">drv_null_flush</a> from drv_lcd.o(i.drv_null_flush) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[c]">drv_null_init</a> from drv_lcd.o(i.drv_null_init) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[14]">drv_null_lcd_bl</a> from drv_lcd.o(i.drv_null_lcd_bl) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[10]">drv_null_prepare_display</a> from drv_lcd.o(i.drv_null_prepare_display) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[13]">drv_null_scan_dir</a> from drv_lcd.o(i.drv_null_scan_dir) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[15]">drv_null_update</a> from drv_lcd.o(i.drv_null_update) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[b]">drv_ssd1615_display_onoff</a> from drv_str7565.o(i.drv_ssd1615_display_onoff) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[a]">drv_ssd1615_init</a> from drv_str7565.o(i.drv_ssd1615_init) referenced 2 times from drv_str7565.o(.data)
 <LI><a href="#[c5]">gt1151_close</a> from gt1151.o(i.gt1151_close) referenced from gt1151.o(.constdata)
 <LI><a href="#[c3]">gt1151_init</a> from gt1151.o(i.gt1151_init) referenced from gt1151.o(.constdata)
 <LI><a href="#[c4]">gt1151_open</a> from gt1151.o(i.gt1151_open) referenced from gt1151.o(.constdata)
 <LI><a href="#[c6]">gt1151_task</a> from gt1151.o(i.gt1151_task) referenced from gt1151.o(.constdata)
 <LI><a href="#[c1]">gt9147_close</a> from gt9147.o(i.gt9147_close) referenced from gt9147.o(.constdata)
 <LI><a href="#[bf]">gt9147_init</a> from gt9147.o(i.gt9147_init) referenced from gt9147.o(.constdata)
 <LI><a href="#[c0]">gt9147_open</a> from gt9147.o(i.gt9147_open) referenced from gt9147.o(.constdata)
 <LI><a href="#[c2]">gt9147_task</a> from gt9147.o(i.gt9147_task) referenced from gt9147.o(.constdata)
 <LI><a href="#[b3]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[bd]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[bc]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[be]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[bb]">start_task</a> from petite.o(i.start_task) referenced from petite.o(i.petite_app)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b5]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[de]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c1]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2c0]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[29]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b1]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>BDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>BDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>BDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>BDMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>BDMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>BDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>BDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>BDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>BDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DFSDM1_FLT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DFSDM1_FLT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DFSDM1_FLT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DFSDM1_FLT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DFSDM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>GFXMMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>OTFDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_TAMP_STAMP_CSS_LSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>USART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uldiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_set_cal
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeed
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>

<P><STRONG><a name="[d4]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[104]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[1d6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
</UL>

<P><STRONG><a name="[2b9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d8]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d7]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[df]"></a>ADC_ConfigureBoostMode</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.ADC_ConfigureBoostMode))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[e2]"></a>ADC_Enable</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[e5]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[e7]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[e9]"></a>BSP_SD_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigSpeedBusOperation
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[ea]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[ef]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_ReadBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[179]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_ReadCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[f1]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_WriteBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[17a]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdmmc_sd.o(i.BSP_SD_WriteCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[25]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DCMI_PSSI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>DCMI_PWDN_RESET_Init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, board.o(i.DCMI_PWDN_RESET_Init))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[36]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DebugMon_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[242]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stimer.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[fd]"></a>EPD_select_LUT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_il3820.o(i.EPD_select_LUT))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
</UL>

<P><STRONG><a name="[113]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_map
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_read_id
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_waitwriteend
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_USART2_UART_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_UART4_Init
</UL>

<P><STRONG><a name="[100]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[101]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[102]"></a>FatFs_FileTest</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, sd_fat.o(i.FatFs_FileTest))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[109]"></a>FatFs_GetVolume</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sd_fat.o(i.FatFs_GetVolume))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 832 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[21a]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_temp
</UL>

<P><STRONG><a name="[10f]"></a>HAL_ADC_Init</STRONG> (Thumb, 414 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_temp
</UL>

<P><STRONG><a name="[116]"></a>HAL_ADC_Start</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_temp
</UL>

<P><STRONG><a name="[f4]"></a>HAL_DCMI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.HAL_DCMI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAError
</UL>

<P><STRONG><a name="[11a]"></a>HAL_DCMI_FrameEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.HAL_DCMI_FrameEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_DCMI_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_LineEventCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PSSI_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_DCMI_Init</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.HAL_DCMI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DCMI_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_DCMI_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.HAL_DCMI_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_DCMI_MspInit</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_DCMI_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_DCMI_Start_DMA</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
</UL>

<P><STRONG><a name="[119]"></a>HAL_DCMI_VsyncEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.HAL_DCMI_VsyncEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_DMAEx_ChangeMemory</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, stm32h7xx_hal_dma_ex.o(i.HAL_DMAEx_ChangeMemory))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAXferCplt
</UL>

<P><STRONG><a name="[122]"></a>HAL_DMAEx_MultiBufferStart_IT</STRONG> (Thumb, 966 bytes, Stack size 0 bytes, stm32h7xx_hal_dma_ex.o(i.HAL_DMAEx_MultiBufferStart_IT))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[126]"></a>HAL_DMA_Abort</STRONG> (Thumb, 856 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Abort
</UL>

<P><STRONG><a name="[117]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 600 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 710 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
</UL>

<P><STRONG><a name="[fb]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 1836 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_DMA_Init</STRONG> (Thumb, 976 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
</UL>

<P><STRONG><a name="[121]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 680 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[fa]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_SET_SCPLL
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_OutSize_Set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_io_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_io_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 416 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_io_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_io_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_in
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>

<P><STRONG><a name="[271]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>

<P><STRONG><a name="[f8]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_io_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_io_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigSpeedBusOperation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MemoryMapped
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[136]"></a>HAL_LTDC_Init</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[137]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_LTDC_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[192]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[191]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[193]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[131]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
</UL>

<P><STRONG><a name="[11e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
</UL>

<P><STRONG><a name="[12e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_OSPIM_Config</STRONG> (Thumb, 1036 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPIM_Config))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPIM_GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_OSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Command))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_map
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_writeen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_status_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_reset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_read_id
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_waitwriteend
</UL>

<P><STRONG><a name="[13e]"></a>HAL_OSPI_Init</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
</UL>

<P><STRONG><a name="[140]"></a>HAL_OSPI_MemoryMapped</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_MemoryMapped))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_map
</UL>

<P><STRONG><a name="[13f]"></a>HAL_OSPI_MspInit</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_OSPI_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_OSPI_Receive</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Receive))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_read_id
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_waitwriteend
</UL>

<P><STRONG><a name="[142]"></a>HAL_OSPI_Transmit</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.HAL_OSPI_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_status_init
</UL>

<P><STRONG><a name="[143]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[144]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[145]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 318 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[146]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[147]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 546 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[112]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2156 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
</UL>

<P><STRONG><a name="[14a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 590 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[14b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[14c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12f]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[14d]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_MCOConfig))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1304 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14f]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rtc
</UL>

<P><STRONG><a name="[151]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rtc
</UL>

<P><STRONG><a name="[152]"></a>HAL_RTC_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[156]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[157]"></a>HAL_SAI_Abort</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32h7xx_hal_sai.o(i.HAL_SAI_Abort))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_SAI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sai.o(i.HAL_SAI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAAbort
</UL>

<P><STRONG><a name="[159]"></a>HAL_SAI_IRQHandler</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32h7xx_hal_sai.o(i.HAL_SAI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_SDEx_Read_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Read_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HAL_SDEx_Read_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Read_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_SDEx_Write_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Write_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_SDEx_Write_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Write_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>HAL_SD_ConfigSpeedBusOperation</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ConfigSpeedBusOperation))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 440 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[e8]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigSpeedBusOperation
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[163]"></a>HAL_SD_GetCardStatus</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardStatus))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[165]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 568 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf1CpltCallback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf0CpltCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf1CpltCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf0CpltCallback
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>HAL_SD_Init</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_SD_InitCard</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[16a]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdmmc_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdmmc_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 432 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>

<P><STRONG><a name="[17d]"></a>HAL_SPI_Init</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[17e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[17f]"></a>HAL_SPI_Receive</STRONG> (Thumb, 550 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[182]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 554 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[180]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 776 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[132]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[26f]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_USART2_UART_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_UART4_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_USART2_UART_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_UART4_Init
</UL>

<P><STRONG><a name="[186]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_USART2_UART_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_UART4_Init
</UL>

<P><STRONG><a name="[187]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_USART2_UART_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_UART4_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_UART_MspInit</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[18c]"></a>HAL_UART_Transmit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>

<P><STRONG><a name="[23]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>LCD_Config</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, mcu_ltdc.o(i.LCD_Config))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rgb565_buf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[190]"></a>MPU_Config</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(i.MPU_Config))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>MX_OCTOSPI1_Init</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(i.MX_OCTOSPI1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPIM_Config
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>MX_SDMMC1_SD_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdmmc_sd.o(i.MX_SDMMC1_SD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[199]"></a>MX_SPI1_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
</UL>

<P><STRONG><a name="[24]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>OV2640_Init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_Init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[1a1]"></a>OV5640_Auto_Focus</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Auto_Focus))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1a6]"></a>OV5640_Brightness</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Brightness))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1a7]"></a>OV5640_Color_Saturation</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Color_Saturation))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1a8]"></a>OV5640_Contrast</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Contrast))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1a9]"></a>OV5640_Flash_Lamp</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Flash_Lamp))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1aa]"></a>OV5640_Focus_Init</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Focus_Init))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1ab]"></a>OV5640_Init</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Init))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[1ad]"></a>OV5640_Light_Mode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Light_Mode))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1af]"></a>OV5640_OutSize_Set</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_OutSize_Set))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_test
</UL>

<P><STRONG><a name="[1ac]"></a>OV5640_RGB565_Mode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_RGB565_Mode))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1b0]"></a>OV5640_SET_SCPLL</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_SET_SCPLL))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_test
</UL>

<P><STRONG><a name="[1ae]"></a>OV5640_Sharpness</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_Sharpness))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[108]"></a>PrintFormat</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, log.o(i.PrintFormat))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[150]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[154]"></a>RTC_EnterInitMode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[155]"></a>RTC_ExitInitMode</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[84]"></a>SAI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SAI2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SDMMC1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1b3]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[15c]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigSpeedBusOperation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[160]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1b5]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1b6]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[177]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[178]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[1b8]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1b9]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1bb]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1bc]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[162]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[1bd]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1bf]"></a>SDMMC_CmdStatusRegister</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdStatusRegister))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[167]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[1c0]"></a>SDMMC_CmdSwitch</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeed
</UL>

<P><STRONG><a name="[17b]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[17c]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[176]"></a>SDMMC_ConfigData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1b2]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSwitch
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[1ba]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[1b4]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[1be]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[1b7]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[1c2]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[15d]"></a>SDMMC_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[161]"></a>SDMMC_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[173]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[166]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HighSpeed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1b1]"></a>SDMMC_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSwitch
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[16b]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[c7]"></a>SD_initialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>SD_ioctl</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>SD_read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>SD_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>SD_write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>SystemClock_Config</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>SystemInit</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, system_stm32h7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>Time_Update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stimer.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18a]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[18b]"></a>UART_CheckIdleState</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[189]"></a>UART_SetConfig</STRONG> (Thumb, 942 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[18d]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[26]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1ca]"></a>W25Qxx_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, w25q64.o(i.W25Qxx_init))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_status_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>W25Qxx_read_id</STRONG> (Thumb, 426 bytes, Stack size 0 bytes, w25q64.o(i.W25Qxx_read_id))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_init
</UL>

<P><STRONG><a name="[1cd]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_temp
</UL>

<P><STRONG><a name="[1cf]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2af]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[1d5]"></a>audio_pipe_close</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, audio_pipeline.o(i.audio_pipe_close))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_stop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>

<P><STRONG><a name="[1d8]"></a>board_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, board.o(i.board_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1de]"></a>board_low_task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, board.o(i.board_low_task))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1a0]"></a>bus_i2c_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_close))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_task
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_task
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_close
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>

<P><STRONG><a name="[19e]"></a>bus_i2c_open</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_open))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_task
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_task
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_I2C_open
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>

<P><STRONG><a name="[1e2]"></a>bus_i2c_register</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_register))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[19f]"></a>bus_i2c_transfer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bus_i2c.o(i.bus_i2c_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_WriteReg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_ReadReg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>

<P><STRONG><a name="[1eb]"></a>bus_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
</UL>

<P><STRONG><a name="[1ed]"></a>bus_lcd_close</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_close))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
</UL>

<P><STRONG><a name="[1ef]"></a>bus_lcd_open</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_open))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
</UL>

<P><STRONG><a name="[1f1]"></a>bus_lcd_rst</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_rst))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[1f2]"></a>bus_lcd_write_cmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_write_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
</UL>

<P><STRONG><a name="[1f4]"></a>bus_lcd_write_data</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_write_data))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
</UL>

<P><STRONG><a name="[1f5]"></a>bus_spi_register</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spi_register))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[1ee]"></a>bus_spich_close</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_close))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_close
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>

<P><STRONG><a name="[1fa]"></a>bus_spich_cs</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_cs))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
</UL>

<P><STRONG><a name="[1f0]"></a>bus_spich_open</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_open))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_open
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
</UL>

<P><STRONG><a name="[1fd]"></a>bus_spich_register</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_register))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[1f3]"></a>bus_spich_transfer</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bus_spi.o(i.bus_spich_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
</UL>

<P><STRONG><a name="[1e6]"></a>bus_vi2c_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_init))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>

<P><STRONG><a name="[207]"></a>bus_vi2c_sda_input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda_input))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[202]"></a>bus_vi2c_sda_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda_output))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[1e7]"></a>bus_vi2c_transfer</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>

<P><STRONG><a name="[1f8]"></a>bus_vspi_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_close))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>

<P><STRONG><a name="[1f6]"></a>bus_vspi_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_init))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
</UL>

<P><STRONG><a name="[1fc]"></a>bus_vspi_open</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_open))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>

<P><STRONG><a name="[1ff]"></a>bus_vspi_transfer</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, bus_vspi.o(i.bus_vspi_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>

<P><STRONG><a name="[1dc]"></a>camera_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, camera_api.o(i.camera_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[210]"></a>camera_test</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, board.o(i.camera_test))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_SET_SCPLL
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_OutSize_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[20]"></a>cap_touch_task_idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touch.o(i.cap_touch_task_idle))
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[218]"></a>cpu_rtc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cuckoo_test.o(i.cpu_rtc))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[219]"></a>cpu_temp</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, cuckoo_test.o(i.cpu_temp))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[264]"></a>ctp_fill_buf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, touch.o(i.ctp_fill_buf))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_task
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_task
</UL>

<P><STRONG><a name="[ba]"></a>cuckoo_7b0_test</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, cuckoo_test.o(i.cuckoo_7b0_test))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_add_node
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_open
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_backlight
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_test
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_temp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cuckoo_test.o(i.cuckoo_7b0_test_init)
</UL>
<P><STRONG><a name="[1dd]"></a>cuckoo_7b0_test_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cuckoo_test.o(i.cuckoo_7b0_test_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[267]"></a>delay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcu_ltdc.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
</UL>

<P><STRONG><a name="[228]"></a>dev_lcd_backlight</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_backlight))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[231]"></a>dev_lcd_fill</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_fill))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[227]"></a>dev_lcd_open</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_open))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[229]"></a>dev_lcd_put_string</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, display.o(i.dev_lcd_put_string))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_fill
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[233]"></a>dev_lcd_register</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_register))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[234]"></a>dev_lcd_setdir</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_setdir))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
</UL>

<P><STRONG><a name="[22a]"></a>dev_lcd_update</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_lcd.o(i.dev_lcd_update))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[235]"></a>dev_lcdbus_register</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, bus_lcd.o(i.dev_lcdbus_register))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
</UL>

<P><STRONG><a name="[24d]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[24e]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[24a]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_read))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[257]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[239]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_write))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[18]"></a>drv_IL3820_color_fill</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_color_fill))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>drv_IL3820_fill</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_fill))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>drv_IL3820_flush</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_flush))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>drv_IL3820_init</STRONG> (Thumb, 568 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>drv_IL3820_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>drv_IL3820_prepare_display</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_prepare_display))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>drv_IL3820_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_update))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>drv_ST7565_color_fill</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_color_fill))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>drv_ST7565_fill</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_fill))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>drv_ST7565_flush</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_flush))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>drv_ST7565_init</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>drv_ST7565_lcd_bl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_lcd_bl))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>drv_ST7565_prepare_display</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_prepare_display))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>drv_ST7565_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_update))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>drv_il3820_write_cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_il3820_write_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
</UL>

<P><STRONG><a name="[ff]"></a>drv_il3820_write_data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_il3820_write_data))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
</UL>

<P><STRONG><a name="[e]"></a>drv_null_color_fill</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_color_fill))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>drv_null_drawpoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_drawpoint))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>drv_null_fill</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_fill))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>drv_null_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_flush))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>drv_null_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_init))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>drv_null_lcd_bl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_lcd_bl))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>drv_null_prepare_display</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_prepare_display))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>drv_null_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_update))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>drv_ssd1615_display_onoff</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ssd1615_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>drv_ssd1615_init</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ssd1615_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[106]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(i.f_close))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[10a]"></a>f_getfree</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, ff.o(i.f_getfree))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
</UL>

<P><STRONG><a name="[249]"></a>f_lseek</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, ff.o(i.f_lseek))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
</UL>

<P><STRONG><a name="[24b]"></a>f_mkfs</STRONG> (Thumb, 1350 bytes, Stack size 0 bytes, ff.o(i.f_mkfs))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[251]"></a>f_mount</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
</UL>

<P><STRONG><a name="[103]"></a>f_open</STRONG> (Thumb, 426 bytes, Stack size 0 bytes, ff.o(i.f_open))
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[107]"></a>f_read</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, ff.o(i.f_read))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[245]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, ff.o(i.f_sync))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[105]"></a>f_write</STRONG> (Thumb, 368 bytes, Stack size 0 bytes, ff.o(i.f_write))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>

<P><STRONG><a name="[221]"></a>ff_oem2uni</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[224]"></a>ff_uni2oem</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[217]"></a>ff_wtoupper</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[25c]"></a>font_dot_wjq_addr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, font_wjq.o(i.font_dot_wjq_addr))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
</UL>

<P><STRONG><a name="[258]"></a>font_dot_ymy_addr</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, font_ymy.o(i.font_dot_ymy_addr))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_pos_1_gbk
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_pos_1_big5
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
</UL>

<P><STRONG><a name="[22e]"></a>font_find_font</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, font.o(i.font_find_font))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
</UL>

<P><STRONG><a name="[22f]"></a>font_get_hw</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, font.o(i.font_get_hw))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[230]"></a>font_getdot</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, font.o(i.font_getdot))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_ymy_addr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_wjq_addr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[2aa]"></a>font_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, font.o(i.font_init))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[25a]"></a>font_pos_1_big5</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, font_ymy.o(i.font_pos_1_big5))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_ymy_addr
</UL>

<P><STRONG><a name="[259]"></a>font_pos_1_gbk</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, font_ymy.o(i.font_pos_1_gbk))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_dot_ymy_addr
</UL>

<P><STRONG><a name="[25f]"></a>fun_sound_stop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_stop))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
</UL>

<P><STRONG><a name="[1df]"></a>fun_sound_task</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_task))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[250]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[c5]"></a>gt1151_close</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt1151.o(i.gt1151_close))
<BR>[Address Reference Count : 1]<UL><LI> gt1151.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>gt1151_init</STRONG> (Thumb, 318 bytes, Stack size 0 bytes, gt1151.o(i.gt1151_init))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_update_cfg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_io_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt1151.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>gt1151_open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt1151.o(i.gt1151_open))
<BR>[Address Reference Count : 1]<UL><LI> gt1151.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>gt1151_task</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, gt1151.o(i.gt1151_task))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctp_fill_buf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt1151.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>gt9147_close</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt9147.o(i.gt9147_close))
<BR>[Address Reference Count : 1]<UL><LI> gt9147.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>gt9147_init</STRONG> (Thumb, 318 bytes, Stack size 0 bytes, gt9147.o(i.gt9147_init))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_update_cfg
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_io_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt9147.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>gt9147_open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt9147.o(i.gt9147_open))
<BR>[Address Reference Count : 1]<UL><LI> gt9147.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>gt9147_task</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, gt9147.o(i.gt9147_task))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctp_fill_buf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt9147.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>init_rgb565_buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_ltdc.o(i.init_rgb565_buf))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[1da]"></a>lcd_reset</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, mcu_ltdc.o(i.lcd_reset))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1c7]"></a>lv_tick_inc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b3]"></a>main</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_map
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_qpi_run_fun (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init_pra
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DCMI_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[211]"></a>mcu_dcmi_captruce</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_captruce))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_test
</UL>

<P><STRONG><a name="[1f9]"></a>mcu_hspi_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_close))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
</UL>

<P><STRONG><a name="[1f7]"></a>mcu_hspi_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_init))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
</UL>

<P><STRONG><a name="[1fb]"></a>mcu_hspi_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_open))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
</UL>

<P><STRONG><a name="[1fe]"></a>mcu_hspi_transfer</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mcu_spi.o(i.mcu_hspi_transfer))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_transfer
</UL>

<P><STRONG><a name="[1d7]"></a>mcu_i2s_dma_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_stop))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pipe_close
</UL>

<P><STRONG><a name="[20f]"></a>mcu_io_config_in</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_config_in))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
</UL>

<P><STRONG><a name="[1e9]"></a>mcu_io_config_out</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_config_out))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
</UL>

<P><STRONG><a name="[209]"></a>mcu_io_input_readbit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_input_readbit))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
</UL>

<P><STRONG><a name="[1ec]"></a>mcu_io_output_resetbit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_resetbit))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_open
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>

<P><STRONG><a name="[1ea]"></a>mcu_io_output_setbit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_setbit))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_cs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_close
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
</UL>

<P><STRONG><a name="[269]"></a>mcu_uart_init_pra</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_init_pra))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26a]"></a>mcu_uart_open</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_open))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_USART2_UART_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_MX_UART4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[272]"></a>mcu_uart_write</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_write))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[20a]"></a>mcu_vi2c_io_config_in</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mcu_i2c.o(i.mcu_vi2c_io_config_in))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
</UL>

<P><STRONG><a name="[205]"></a>mcu_vi2c_io_config_out</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mcu_i2c.o(i.mcu_vi2c_io_config_out))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_init
</UL>

<P><STRONG><a name="[262]"></a>mcu_vi2c_transfer_reg</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, bus_vi2c.o(i.mcu_vi2c_transfer_reg))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_task
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_update_cfg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_task
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_update_cfg
</UL>

<P><STRONG><a name="[22c]"></a>osDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[280]"></a>osKernelInitialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
</UL>

<P><STRONG><a name="[275]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
</UL>

<P><STRONG><a name="[1e1]"></a>osMutexAcquire</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
</UL>

<P><STRONG><a name="[1e5]"></a>osMutexNew</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>

<P><STRONG><a name="[1e0]"></a>osMutexRelease</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>

<P><STRONG><a name="[1c6]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.osSystickHandler))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[22d]"></a>osThreadNew</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test_init
</UL>

<P><STRONG><a name="[26d]"></a>petite_app</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, petite.o(i.petite_app))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>petite_dev_register</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, board_sysconf.o(i.petite_dev_register))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[2a5]"></a>pvPortMalloc</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2c7]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[295]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[225]"></a>sd_fatfs_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sd_fat.o(i.sd_fatfs_init))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[2a8]"></a>sdcard_fatfs_init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, sd_fat.o(i.sdcard_fatfs_init))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_fatfs_init
</UL>

<P><STRONG><a name="[bb]"></a>start_task</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, petite.o(i.start_task))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> petite.o(i.petite_app)
</UL>
<P><STRONG><a name="[1db]"></a>tp_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, touch.o(i.tp_init))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[22b]"></a>tp_open</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, touch.o(i.tp_open))
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[2ae]"></a>ts_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tslib.o(i.ts_config))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
</UL>

<P><STRONG><a name="[2ac]"></a>ts_open</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tslib.o(i.ts_open))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_linear_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
</UL>

<P><STRONG><a name="[2ab]"></a>ts_open_module</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ts_calibrate.o(i.ts_open_module))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_set_cal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_open
</UL>

<P><STRONG><a name="[2ad]"></a>ts_set_cal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tslib.o(i.ts_set_cal))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
</UL>

<P><STRONG><a name="[f3]"></a>uart_printf</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, log.o(i.uart_printf))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFormat
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fatfs_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_GetVolume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFs_FileTest
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_read_id
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_captruce
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_temp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rtc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_task
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_update_cfg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_task
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_update_cfg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[282]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2b5]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2ca]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[287]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[294]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[284]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, list.o(i.vListInsert))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[283]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[286]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[288]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[28f]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[2bf]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2b0]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[27a]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[29f]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[274]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2c4]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2a4]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2b3]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2b2]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2b4]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[276]"></a>vTaskStartScheduler</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[29d]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ce]"></a>vTaskSwitchContext</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[226]"></a>vfs_add_node</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, vfs.o(i.vfs_add_node))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
</UL>

<P><STRONG><a name="[260]"></a>vfs_close</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vfs.o(i.vfs_close))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>

<P><STRONG><a name="[2a9]"></a>vfs_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vfs.o(i.vfs_init))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[25d]"></a>vfs_lseek</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, vfs.o(i.vfs_lseek))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
</UL>

<P><STRONG><a name="[25b]"></a>vfs_open</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, vfs.o(i.vfs_open))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_font
</UL>

<P><STRONG><a name="[25e]"></a>vfs_read</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, vfs.o(i.vfs_read))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_getdot
</UL>

<P><STRONG><a name="[26b]"></a>w25qxx_map</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, w25q64.o(i.w25qxx_map))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MemoryMapped
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ba]"></a>w25qxx_reset</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, w25q64.o(i.w25qxx_reset))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_status_init
</UL>

<P><STRONG><a name="[1cb]"></a>w25qxx_status_init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, w25q64.o(i.w25qxx_status_init))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_writeen
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_reset
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qxx_init
</UL>

<P><STRONG><a name="[2bc]"></a>w25qxx_writeen</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, w25q64.o(i.w25qxx_writeen))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_status_init
</UL>

<P><STRONG><a name="[232]"></a>wjq_free_m</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alloc.o(i.wjq_free_m))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_t
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>

<P><STRONG><a name="[2bd]"></a>wjq_free_t</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, alloc.o(i.wjq_free_t))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>

<P><STRONG><a name="[19d]"></a>wjq_log</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, log.o(i.wjq_log))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_app
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;petite_dev_register
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cuckoo_7b0_test
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_linear_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_prepare_display
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_flush
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_fill
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_color_fill
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_drawpoint
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_display_onoff
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vspi_transfer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_t
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[1e3]"></a>wjq_malloc_m</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alloc.o(i.wjq_malloc_m))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spich_register
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_spi_register
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_register
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[2be]"></a>wjq_malloc_t</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, alloc.o(i.wjq_malloc_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>

<P><STRONG><a name="[2b7]"></a>xPortStartScheduler</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[27d]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[279]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[278]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[2c3]"></a>xQueueGenericCreate</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[28a]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[292]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[27b]"></a>xQueueGenericSend</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[2c6]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[29b]"></a>xQueueReceive</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[277]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 372 bytes, Stack size 0 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[2c5]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[27f]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[27e]"></a>xTaskCreateStatic</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[27c]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2a0]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[2c2]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[28d]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2c8]"></a>xTaskPriorityInherit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2a3]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[29e]"></a>xTaskResumeAll</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2b6]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[29a]"></a>xTimerGenericCommand</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[26c]"></a>test_qpi_run_fun</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_qspi.o(i.test_qpi_run_fun))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[268]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(i.CPU_CACHE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>MX_ADC2_Init</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(i.MX_ADC2_Init))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>MX_DCMI_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.MX_DCMI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>MX_GPIO_Init</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>MX_RTC_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(i.MX_RTC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[128]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[129]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[12a]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[12b]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[12c]"></a>DMA_SetConfig</STRONG> (Thumb, 594 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[125]"></a>DMA_MultiBufferSetConfig</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32h7xx_hal_dma_ex.o(i.DMA_MultiBufferSetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart_IT
</UL>

<P><STRONG><a name="[13a]"></a>OSPIM_GetConfig</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.OSPIM_GetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPIM_Config
</UL>

<P><STRONG><a name="[13d]"></a>OSPI_ConfigCmd</STRONG> (Thumb, 432 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.OSPI_ConfigCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[13c]"></a>OSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(i.OSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MemoryMapped
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[148]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[149]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[185]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[b6]"></a>DCMI_DMAError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.DCMI_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
<LI> stm32h7xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[b7]"></a>DCMI_DMAXferCplt</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32h7xx_hal_dcmi.o(i.DCMI_DMAXferCplt))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_ChangeMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[135]"></a>LTDC_SetConfig</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[b8]"></a>SAI_DMAAbort</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32h7xx_hal_sai.o(i.SAI_DMAAbort))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_sai.o(i.HAL_SAI_IRQHandler)
</UL>
<P><STRONG><a name="[158]"></a>SAI_Disable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32h7xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Abort
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAAbort
</UL>

<P><STRONG><a name="[15e]"></a>SD_FindSCR</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[15b]"></a>SD_HighSpeed</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.SD_HighSpeed))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSwitch
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigSpeedBusOperation
</UL>

<P><STRONG><a name="[175]"></a>SD_InitCard</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[174]"></a>SD_PowerON</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[164]"></a>SD_SendSDStatus</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.SD_SendSDStatus))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
</UL>

<P><STRONG><a name="[181]"></a>SPI_CloseTransfer</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.SPI_CloseTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[183]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[10d]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[e3]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[10c]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[115]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.LL_ADC_REG_IsTriggerSourceSWStart))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[10e]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[2bb]"></a>w25qxx_waitwriteend</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, w25q64.o(i.w25qxx_waitwriteend))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_status_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_reset
</UL>

<P><STRONG><a name="[2b8]"></a>vfs_get_dir_name</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, vfs.o(i.vfs_get_dir_name))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[1e8]"></a>bus_lcd_IO_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_IO_init))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[200]"></a>bus_vi2c_ack</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_ack))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[204]"></a>bus_vi2c_delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_delay))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[206]"></a>bus_vi2c_readbyte</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_readbyte))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[208]"></a>bus_vi2c_readsda</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_readsda))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
</UL>

<P><STRONG><a name="[201]"></a>bus_vi2c_scl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_scl))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readbyte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[203]"></a>bus_vi2c_sda</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_sda))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_writebyte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_start
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_ack
</UL>

<P><STRONG><a name="[20b]"></a>bus_vi2c_start</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_start))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[20c]"></a>bus_vi2c_stop</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_stop))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_wait_ack
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[20e]"></a>bus_vi2c_wait_ack</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_wait_ack))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_input
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_readsda
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[20d]"></a>bus_vi2c_writebyte</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, bus_vi2c.o(i.bus_vi2c_writebyte))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda_output
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_sda
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_scl
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_vi2c_transfer
</UL>

<P><STRONG><a name="[26e]"></a>mcu_MX_UART4_Init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_MX_UART4_Init))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>

<P><STRONG><a name="[270]"></a>mcu_MX_USART2_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_MX_USART2_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>

<P><STRONG><a name="[eb]"></a>SD_MspInit</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, sdmmc_sd.o(i.SD_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[6]"></a>drv_ST7565_display_onoff</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>drv_ST7565_drawpoint</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_drawpoint))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[244]"></a>drv_ST7565_refresh_gram</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_refresh_gram))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_update
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[7]"></a>drv_ST7565_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_str7565.o(i.drv_ST7565_scan_dir))
<BR>[Address Reference Count : 2]<UL><LI> drv_str7565.o(.data)
<LI> drv_str7565.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>drv_null_display_onoff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_display_onoff))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>drv_null_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_lcd.o(i.drv_null_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>drv_IL3820_display_onoff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_display_onoff))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>drv_IL3820_drawpoint</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_drawpoint))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[243]"></a>drv_IL3820_refresh_gram</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_refresh_gram))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_update
</UL>

<P><STRONG><a name="[1d]"></a>drv_IL3820_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_il3820.o(i.drv_IL3820_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> drv_il3820.o(.data)
</UL>
<P><STRONG><a name="[265]"></a>gt9147_io_init</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, gt9147.o(i.gt9147_io_init))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_init
</UL>

<P><STRONG><a name="[266]"></a>gt9147_update_cfg</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, gt9147.o(i.gt9147_update_cfg))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt9147_init
</UL>

<P><STRONG><a name="[261]"></a>gt1151_io_init</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, gt1151.o(i.gt1151_io_init))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_init
</UL>

<P><STRONG><a name="[263]"></a>gt1151_update_cfg</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, gt1151.o(i.gt1151_update_cfg))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt1151_init
</UL>

<P><STRONG><a name="[273]"></a>mod_linear_init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, tslib.o(i.mod_linear_init))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
</UL>

<P><STRONG><a name="[19c]"></a>OV2640_ReadReg</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_ReadReg))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[19b]"></a>OV2640_WriteReg</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_WriteReg))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[1a4]"></a>OV5640_I2C_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_I2C_close))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_SET_SCPLL
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_OutSize_Set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
</UL>

<P><STRONG><a name="[1a2]"></a>OV5640_I2C_open</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_I2C_open))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_SET_SCPLL
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_OutSize_Set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
</UL>

<P><STRONG><a name="[1a5]"></a>OV5640_ReadReg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_ReadReg))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
</UL>

<P><STRONG><a name="[1a3]"></a>OV5640_WriteReg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ov5640.o(i.OV5640_WriteReg))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_SET_SCPLL
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_OutSize_Set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Sharpness
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_RGB565_Mode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Light_Mode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Focus_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Contrast
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Color_Saturation
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Brightness
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Auto_Focus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV5640_Flash_Lamp
</UL>

<P><STRONG><a name="[28b]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[28c]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[290]"></a>prvInitialiseMutex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[291]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[297]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[2a2]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[281]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[285]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[28e]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[bd]"></a>prvIdleTask</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[293]"></a>prvInitialiseNewTask</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2c9]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[289]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[296]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[298]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[29c]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[299]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2a1]"></a>prvSwitchTimerLists</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[be]"></a>prvTimerTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[2a6]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2a7]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[bc]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[212]"></a>check_fs</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, ff.o(i.check_fs))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[222]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[238]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[216]"></a>cmp_lfn</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[21c]"></a>create_chain</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, ff.o(i.create_chain))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[21f]"></a>create_name</STRONG> (Thumb, 512 bytes, Stack size 0 bytes, ff.o(i.create_name))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[220]"></a>dbc_1st</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[236]"></a>dir_clear</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ff.o(i.dir_clear))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[23a]"></a>dir_find</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, ff.o(i.dir_find))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[23d]"></a>dir_next</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, ff.o(i.dir_next))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[23e]"></a>dir_register</STRONG> (Thumb, 468 bytes, Stack size 0 bytes, ff.o(i.dir_register))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[23b]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, ff.o(i.dir_sdi))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[247]"></a>find_volume</STRONG> (Thumb, 584 bytes, Stack size 0 bytes, ff.o(i.find_volume))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[252]"></a>follow_path</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, ff.o(i.follow_path))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[240]"></a>gen_numname</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, ff.o(i.gen_numname))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[21d]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ff.o(i.get_fat))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[24c]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[253]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[248]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[214]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[215]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.mem_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[23f]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[223]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[213]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ff.o(i.move_window))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[21e]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, ff.o(i.put_fat))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[255]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, ff.o(i.remove_chain))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[254]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[24f]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[241]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[23c]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[256]"></a>sync_fs</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, ff.o(i.sync_fs))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[237]"></a>sync_window</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ff.o(i.sync_window))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[246]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ff.o(i.validate))
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1c1]"></a>SD_CheckStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[1d0]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ce]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 0 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
